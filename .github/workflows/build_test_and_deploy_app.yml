name: build_test_and_deploy_app.yml
run-name: Execution triggered by ${{ github.actor }}

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-test-app:

    runs-on: ubuntu-latest

    steps:
      - name: Hello World
        run: echo "Hello World"
#      - uses: actions/checkout@v3
#      - uses: nanasess/setup-chromedriver@v1
#      - name: Use Node.js 13.x
#        uses: actions/setup-node@v3
#        with:
#          node-version: 13.x
#      - name: Installing dependencies and initializing app 
#        run: |
#          npm install
#          nohup npm start &
#      - name: Run Unit tests
#        run: |
#          export USE_CHROME=1 && npm test

  check_database_existence:

    runs-on: ubuntu-latest
    needs: build-and-test-app
    outputs: 
      databasepresent: ${{ steps.checkdatabase.outputs.databasepresent }}
      mysql_database_hostname: ${{ steps.checkdatabase.outputs.MYSQL_DATABASE_HOSTNAME }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      MYSQL_DATABASE_NAME: ${{ secrets.MYSQL_DATABASE_NAME }}
      MYSQL_DATABASE_USERNAME: ${{ secrets.MYSQL_DATABASE_USERNAME }}
      MYSQL_DATABASE_PASSWORD: ${{ secrets.MYSQL_DATABASE_PASSWORD }}

    steps:
      - uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      - name: Check database presence
        id: checkdatabase
        shell: bash
        run: |
          cd ./infrastructure_as_code/terraform/environments/timeoff-prod/
          terraform init
          MYSQL_DATABASE_HOSTNAME=$(terraform output -raw terraform output -raw db_instance_address)
          if [ "$MYSQL_DATABASE_HOSTNAME" == "" ]; then
            echo "databasepresent=false" >> $GITHUB_OUTPUT
          else
            echo "databasepresent=true" >> $GITHUB_OUTPUT
            echo "MYSQL_DATABASE_HOSTNAME=$MYSQL_DATABASE_HOSTNAME" >> $GITHUB_OUTPUT
          fi
      - name: Run replace db.json file if database is present
        if: (steps.checkdatabase.outputs.databasepresent == 'true')
        run: |
          ./infrastructure_as_code/terraform/environments/timeoff-prod/scripts/replaceEnvValues.sh config/db.json config/db.json.example
        shell: bash
  
  build-and-push-docker-image:
    needs: [ build-and-test-app, check_database_existence ]
    runs-on: ubuntu-latest
    if: needs.check_infrastructure_existence.outputs.databasepresent == 'true'

    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: zmbrahian/timeoff-webapp:latest

  terraform-infrastructure-deployment:
    needs: check_database_existence
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      EXECUTION_ROLE_ARN: ${{ secrets.EXECUTION_ROLE_ARN }}
      DOCKER_SECRET_ARN: ${{ secrets.DOCKER_SECRET_ARN }}
      CERTIFICATE_ARN: ${{ secrets.CERTIFICATE_ARN }}

    steps:
      - uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      - name: Run replace env vars script
        run: |
          (cd ./infrastructure_as_code/terraform/environments/timeoff-prod/scripts && ./replaceEnvValues.sh)
        shell: bash
      - name: Run terraform plan
        run: |
          cd ./infrastructure_as_code/terraform/environments/timeoff-prod/
          terraform init
          terraform plan --var-file values.tfvars -out terraform-plan
          terraform apply --var-file values.tfvars --auto-approve terraform-plan